import time
import requests
from flask import Flask
import threading

# === Telegram ===
TOKEN = "8111573872:AAE_LGmsgtGmKmOxx2v03Tsd5bL28z9bL3Y"
CHAT_ID = "944484522"

def send_message(text):
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
    payload = {"chat_id": CHAT_ID, "text": text}
    try:
        r = requests.post(url, data=payload)
        print("Telegram status:", r.status_code)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", e)

# === Flask –¥–ª—è Render ===
app = Flask(__name__)

@app.route('/')
def home():
    return "I'm alive!"

@app.route('/send_test')
def send_test():
    send_message("‚úÖ Test message sent!")
    return "Test message sent!"

def keep_alive():
    def run():
        app.run(host="0.0.0.0", port=10000)
    t = threading.Thread(target=run)
    t.start()

# === –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ===
def get_mem_gems():
    url = "https://api.coingecko.com/api/v3/coins/markets"
    params = {
        "vs_currency": "usd",
        "order": "market_cap_asc",
        "per_page": 250,
        "page": 1,
        "sparkline": False
    }

    try:
        response = requests.get(url, params=params)
        coins = response.json()

        for coin in coins:
            try:
                name = coin["name"]
                symbol = coin["symbol"].upper()
                price = coin["current_price"]
                ath = coin["ath"]
                volume = coin["total_volume"]
                market_cap = coin["market_cap"]
                ath_change = coin["ath_change_percentage"]

                # –§–∏–ª—å—Ç—Ä—ã
                if (
                    not name or not symbol or price <= 0 or ath <= 0 or
                    market_cap is None or market_cap < 5_000_000 or
                    volume is None or volume < 1_000_000 or price > 3 or
                    any(stable in symbol for stable in ["USD", "USDT", "BUSD", "DAI", "TUSD"]) or
                    any(bad in symbol for bad in ["SCAM", "PIG", "TURD", "RUG", "ASS"])
                ):
                    continue

                drop_pct = round((1 - price / ath) * 100, 2)
                if not (80 <= drop_pct <= 90):
                    continue

                # –§–∏–±–æ–Ω–∞—á—á–∏ —Ü–µ–ª–∏
                tp1 = round(price * 1.272, 6)
                tp2 = round(price * 1.618, 6)
                tp3 = round(price * 2.0, 6)
                tp4 = round(price * 2.618, 6)

                msg = f"""üöÄ –ù–∞–π–¥–µ–Ω –º–µ–º-–≥–µ–º!

üî∏ –ù–∞–∑–≤–∞–Ω–∏–µ: {name} ({symbol})
üí≤ –¶–µ–Ω–∞: ${price}
üìâ –ü–∞–¥–µ–Ω–∏–µ –æ—Ç ATH: -{drop_pct:.1f}%
üìä –û–±—ä—ë–º: ${volume:,.0f}
üéØ –¶–µ–ª–∏ (Fibonacci):
‚Ä¢ TP1 (1.272): ${tp1}
‚Ä¢ TP2 (1.618): ${tp2}
‚Ä¢ TP3 (2.0):   ${tp3}
‚Ä¢ TP4 (2.618): ${tp4}

üîó https://www.coingecko.com/en/coins/{coin['id']}
#memgem #crypto #potential
"""
                send_message(msg)

            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–æ–Ω–µ—Ç—ã:", e)

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", e)

def main_loop():
    while True:
        try:
            print("üîÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–º-–≥–µ–º–æ–≤...")
            get_mem_gems()
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ:", e)
        time.sleep(180)

# === –ó–∞–ø—É—Å–∫ ===
keep_alive()
send_message("ü§ñ –ë–æ—Ç —Å CoinGecko –∏ –ª–æ–≥–∏–∫–æ–π –∑–∞–ø—É—â–µ–Ω!")
main_loop()
